{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","thai_characters","pad_array","arr","len","fill","concat","Array","slice","App","makeStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","props","state","name","text_result","logs","handleChange","bind","onClickPredict","tf","this","model","event","setState","target","value","input","createInput","console","log","predict","result","data","result_prob","isMale","push","gender","prob","pad_length","i","length","c","charAt","indexOf","log_list","map","v","className","Card","id","CardContent","TextField","label","onChange","variant","Button","color","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0b84c31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport * as tf from \"@tensorflow/tfjs\";\n\nconst thai_characters = [\n  \"\",\n  \"ก\",\n  \"ข\",\n  \"ฃ\",\n  \"ค\",\n  \"ฅ\",\n  \"ฆ\",\n  \"ง\",\n  \"จ\",\n  \"ฉ\",\n  \"ช\",\n  \"ซ\",\n  \"ฌ\",\n  \"ญ\",\n  \"ฎ\",\n  \"ฏ\",\n  \"ฐ\",\n  \"ฑ\",\n  \"ฒ\",\n  \"ณ\",\n  \"ด\",\n  \"ต\",\n  \"ถ\",\n  \"ท\",\n  \"ธ\",\n  \"น\",\n  \"บ\",\n  \"ป\",\n  \"ผ\",\n  \"ฝ\",\n  \"พ\",\n  \"ฟ\",\n  \"ภ\",\n  \"ม\",\n  \"ย\",\n  \"ร\",\n  \"ฤ\",\n  \"ล\",\n  \"ว\",\n  \"ศ\",\n  \"ษ\",\n  \"ส\",\n  \"ห\",\n  \"ฬ\",\n  \"อ\",\n  \"ฮ\",\n  \"ะ\",\n  \"ั\",\n  \"า\",\n  \"ำ\",\n  \"ิ\",\n  \"ี\",\n  \"ึ\",\n  \"ื\",\n  \"ุ\",\n  \"ู\",\n  \"เ\",\n  \"แ\",\n  \"โ\",\n  \"ใ\",\n  \"ไ\",\n  \"็\",\n  \"่\",\n  \"้\",\n  \"๊\",\n  \"๋\",\n  \"์\"\n];\n\nvar pad_array = function(arr, len, fill) {\n  return arr.concat(Array(len).fill(fill)).slice(0, len);\n};\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"ประยุทธ์\",\n      text_result: \"\",\n      logs: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onClickPredict = this.onClickPredict.bind(this);\n  }\n\n  async componentDidMount() {\n    this.model = await tf.loadLayersModel(\"./tfjs_model/model.json\");\n  }\n\n  async handleChange(event) {\n    this.setState({ name: event.target.value });\n  }\n\n  async onClickPredict() {\n    this.setState({ text_result: \"\" });\n    const { name } = this.state;\n    const input = this.createInput(name);\n    console.log(name, input);\n\n    const result = await this.model.predict(tf.stack([tf.tensor1d(input)]));\n    const result_prob = await result.data();\n\n    const isMale = result_prob[0] > 0.5;\n\n    const text_result = isMale ? \"Male\" : \"Female\";\n\n    let { logs } = this.state;\n\n    logs.push({ name: name, gender: text_result, prob: result_prob[0] });\n    this.setState({ text_result, logs });\n\n    console.log(result_prob[0], \"is male: \" + isMale);\n  }\n\n  createInput(name, pad_length = 15) {\n    //console.log(name);\n    let input = [];\n    for (var i = 0; i < name.length; i++) {\n      const c = name.charAt(i);\n      let pos = thai_characters.indexOf(c);\n      if (pos == -1) {\n        pos = 999;\n      }\n      //console.log(c, pos);\n      input.push(pos);\n    }\n    return pad_array(input, pad_length, 0);\n  }\n\n  render() {\n    const { text_result, logs } = this.state;\n\n    const log_list = logs.map((v, i) => (\n      <div>\n        {v.name}: {v.gender}\n      </div>\n    ));\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Card id=\"card-input\">\n            <CardContent>\n              <h3>ทำนายเพศจากชื่อ</h3>\n\n              <TextField\n                id=\"text-field-name\"\n                label=\"Name\"\n                value={this.state.name}\n                onChange={this.handleChange}\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n\n              <div />\n\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={this.onClickPredict}\n              >\n                Predict\n              </Button>\n\n              {text_result.length > 0 && (\n                <div id=\"result\">Result: {text_result}</div>\n              )}\n\n              {logs.length > 0 && (\n                <div id=\"logs\">\n                  <div>Logs:</div>\n                  <div>{log_list}</div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}